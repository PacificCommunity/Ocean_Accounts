?exists
      rm(list=ls(all=TRUE))
      options(max.print=999999)
      options(scipen = 100)
   ##
   ##    Core libraries
   ##
      library(ggplot2)
      library(plyr)
      library(stringr)
      library(reshape2)
      library(lubridate)
      library(calibrate)
      library(Hmisc)
      library(RColorBrewer)
      library(stringi)
      library(sqldf)
      library(extrafont)
      library(scales)
      library(RDCOMClient)
      library(extrafont)
      library(tictoc)   
   ##
   ##    Special Libraries
   ##      
      library(tensorflow)
      library(GPUmatrix)
      library(Matrix)
      library(keras3)
      library(terra)
      library(raster)
      library(sf)
      library(parallel)   
      library(stats)   
      library(MASS)
   ##
   ##    Set working directory
   ##
      setwd("c:\\Git_Projects\\Ocean_Accounts")
      setwd("C:\\From BigDisk\\GIT\\Ocean_Accounts")
if(!exists(ESA)){
      ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif")
 } else {print("it exists")}
if(!exists("ESA")){
      ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif")
 } else {print("it exists")}
ls()
ESA
if(!exists("ESA")){
      ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif")
 } else {print("it exists")}
?parLapplyLB
      rm(list=ls(all=TRUE))
   ##
   ##    Read in the ESA data
   ##
      ESA   <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif")
#      describe("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif")
   ##
   ##    Read in the Sentinel-2 data
   ##
   ##       Define Coordinates, in lat, lon
   ##       lower_left = (-22.351142, 166.173569)
   ##       upper_right = (-21.895303, 166.932652)
   ##
      Red   <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
      Green <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
      Blue  <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
      describe("Data_Spatial/dep_s2_geomad_red_2017.tif")
   ##
   ##    Move the sentinel data to the same co-ordinate reference system
   ##
      Red    <- project(Red,   crs(ESA))
      Green  <- project(Green, crs(ESA))
      Blue   <- project(Blue,  crs(ESA))
   ##
   ##    Crop the ESA data to the Sentinel-2 extract
   ##
      Extent <- ext(Red)
      ESA <- crop(ESA, Extent)
      png(filename = "Graphical_Output/ESA_Land_Use_Example.png", bg = "transparent", height =(1.0*16.13), width = (1.0*20.66), res = 600, units = "cm")
         plot(ESA)
      dev.off()
      png(filename = "Graphical_Output/Sentinel-2_Example.png", bg = "transparent", height =(1.0*16.13), width = (1.0*20.66), res = 600, units = "cm")
         plot(Red)
      dev.off()
   ##
   ## Draw a sample from the Sentinel-2 data
   ##
      Sample <- sample(1:(nrow(Red)*ncol(Red)), ((nrow(Red)*ncol(Red))*.2))
   ##
   ##    Try with parallel processing
   ##         
      Size_of_Loops <- ceiling(length(Sample) / 10)
      cl <- makeCluster(20)
#      cl <- makeCluster(detectCores())
      clusterEvalQ(cl, { c(library(terra), library(sf)) }) 
      ##
      ##    Load up the clusters with data
      ##
      Load_Me <- function(){
                  if(!exists("ESA")){ 
                     ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif" 
                     }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))
                     }
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))
                     }
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))
                     }
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
   clusterExport(cl, c("Load_Me")) 
   system.time(ll <- parallel::clusterCall(cl, Peg_Me))
      Load_Me <- function(){
                  if(!exists("ESA")){ ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif" }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))}
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))}
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))}
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
   clusterExport(cl, c("Load_Me")) 
   system.time(parallel::clusterCall(cl, Load_Me))
      Load_Me <- function(NULL){
                  if(!exists("ESA")){ ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif" }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))}
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))}
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))}
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
   clusterExport(cl, c("Load_Me")) 
   system.time(parallel::clusterCall(cl, Load_Me))
      Load_Me <- function(){
                  if(!exists("ESA")){ ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif" }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))}
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))}
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))}
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
      Load_Me <- function(){
                  if(!exists("ESA")){ ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif") }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))}
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))}
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))}
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
   clusterExport(cl, c("Load_Me")) 
   system.time(parallel::clusterCall(cl, Load_Me))
      for(Parcycle in 0:9)
        {
          Grab_Target_Samples <- Sample[(Parcycle*Size_of_Loops + 1):min(((Parcycle+1)*Size_of_Loops),  length(Sample))]
          Peg_Me <- function(Fistful)
               {
                 return(
                        Regression_Set <- do.call(rbind,
                                                 lapply(Fistful, 
                                                         function(x){
                                                                     return(
                                                                              tryCatch({
                                                                                         st_sf(data.frame(ESA_Value       = values(crop(ESA, ext(Red[Grab_Target_Samples[x], drop=FALSE])))[1],
                                                                                                          Red_Cell_Number = Grab_Target_Samples[x],
                                                                                                          Red_Values      = Red[Grab_Target_Samples[x]][1],
                                                                                                          Green_Values    = Green[Grab_Target_Samples[x]][1],
                                                                                                          Blue_Values     = Blue[Grab_Target_Samples[x]][1]),
                                                                                                          geom            = st_as_sf(as.polygons(Red[Grab_Target_Samples[x], drop=FALSE]))$geometry)
                                                                                       },
                                                                                   warning = function(w) {}, 
                                                                                   error   = function(e) {NULL}, 
                                                                                   finally = {})
                                                                           )
                                                                     }
                                                       )
                                            )
                       )
               }
            sp <- parallel::clusterSplit(cl, 1:length(Grab_Target_Samples))
            clusterExport(cl, c("sp", "Grab_Target_Samples", "Peg_Me"))  # each worker is a new environment, you will need to export variables/functions to
          tic(print(paste("Starting to process loop", Parcycle)))
            system.time(ll <- parallel::parLapplyLB(cl, sp, Peg_Me))
            New_Parcels <- do.call(rbind, ll)
            assign(paste0("Regression_SetXX", Parcycle),  New_Parcels)
            save(list = paste0("Regression_SetXX", Parcycle), 
                 file = paste0("Parallel/Regression_SetXX", Parcycle,".rda"))                              
            rm(list = paste0("Regression_SetXX",Parcycle))
          toc()
         }
      stopCluster(cl)
ll
      Sample <- sample(1:(nrow(Red)*ncol(Red)), ((nrow(Red)*ncol(Red))*.2))
   ##
   ##    Try with parallel processing
   ##         
      Size_of_Loops <- ceiling(length(Sample) / 10)
#      cl <- makeCluster(20)
      cl <- makeCluster(detectCores())
      clusterEvalQ(cl, { c(library(terra), library(sf)) }) 
      ##
      ##    Load up the clusters with data
      ##
      Load_Me <- function(){
                  if(!exists("ESA")){ ESA <- rast("Data_Spatial/ESACCI-LC-L4-LCCS-Map-300m-P1Y-2015-v2.0.7.tif") }
                  if(!exists("Red")){ 
                     Red    <- rast("Data_Spatial/dep_s2_geomad_red_2017.tif")
                     Red    <- project(Red,   crs(ESA))}
                  if(!exists("Green")){ 
                     Green  <- rast("Data_Spatial/dep_s2_geomad_green_2017.tif")
                     Green  <- project(Green, crs(ESA))}
                  if(!exists("Blue")){ 
                     Blue   <- rast("Data_Spatial/dep_s2_geomad_blue_2017.tif")
                     Blue   <- project(Blue,  crs(ESA))}
                  Extent <- ext(Red)
                  ESA    <- crop(ESA, Extent)
      }
   clusterExport(cl, c("Load_Me")) 
   system.time(parallel::clusterCall(cl, Load_Me))
q()
